<?php 
	/**
	 * This is the root file that controls the templating engine.  This file is called everytime a page is loaded.  It interfaces with the Struts Templating Engine
	 * and gets all settings from the settings.settings.yml file.  Please do not edit this file.  it may cause the site to go down.
	 *
	 * @author 		Technoguru Aka. Johnathan Pulos
	 * @version 	1
	 * @copyright 	11 June, 2010
	 * @package 	default
	 **/

	/**
	 * Include the Struts Templating Engine, and the spyc class that reads the yaml settings
	 **/
	include("engine/struts.php");
	include("engine/spyc/spyc.php");
	
	/**
	 * Set the various variables for use later in the script.
	 * @var 	string 	$page_content Holds the current page content for the selected page
	 * @var 	string 	$newStrut templating object
	 * @var 	array 	$settings an array of settings converted from YAML to a PHP Array thanks to Spyc
	 * @var 	array 	$page_specific_settings an array of page specific settings converted from YAML to a PHP Array thanks to Spyc
	 */
	$page_content = $newStrut = $settings = $page_specific_settings = '';
	
	/**
	 * Set the strutsEngine object
	 */
	$newStrut = new strutsEngine();
	
	/**
	 * Set all default variables and directories
	 * @var string 	$layout_template 		the main layout file for all pages found in the layout directory
	 * @var int		$cache_time 			length of time to cache files for
	 * @var string	$cache_directory		directory for the cahce files
	 * @var	string	$pages_directory		directory for all the page code
	 * @var	string	$pages_code_directory	directory for all the page php functionality code
	 * @var	string	$module_directory		directory for all the modules code (nav, side modules, etc.)
	 * @var	string	$layout_directory		directory for all global layout code
	 * @var	string	$css_directory			directory for all the css files
	 * @var	string	$js_directory			directory for all the javascript files
	 * @var	string	$settings_file			location of the settings YAML
	 * @var	string	$database_file			location of the database settings file
	 */
	$layout_template = 'example.html';
	$cache_time = 600;
	$cache_ext = 'cache';
	$cache_directory = 'tmp/';
	$pages_directory = 'design/pages';
	$pages_code_directory = 'code/pages';
	$module_directory = 'design/modules';
	$layout_directory = 'design/layouts';
	$css_directory = '/design/css';
	$js_directory = '/design/js';
	$settings_file = 'settings/site.yml';
	$database_file = 'settings/database.inc.php';
	
	/**
	 * Spyc load the settings YAML into a PHP array
	 */
	$settings = Spyc::YAMLLoad($settings_file);
	/**
	 * @var	string	$page_url	the url for the page requested.
	 */
	$page_url = (isset($_GET['url'])) ? trim($_GET['url']) : '';
	
	/**
	 * If an extension exists on $page_url then remove it
	 */
	if (strpos($page_url, '.') !== false) {
	    $page_url = substr($page_url, 0, strrpos($page_url, '.')); 
	}
	
	/**
	 * Set path for the page design and code files.
	 * 
	 * All file will exist based on the url.  For example,  if the page requested is /meetings/rooms.html then
	 * -  the page code can be found in $pages_code_directory/meetings/rooms.php
	 * -  the page design/layout file can be found in $pages_directory/meetings/rooms.html
	 * Another example.  If the page requested is /meetings.html
	 * -  the page code can be found in $pages_code_directory/meetings.php
	 * -  the page design/layout file can be found in $pages_directory/meetings.html
	 * 
	 * @var	string $page_path 			the path to the design/layout file for the requested page
	 * @var	string	$pages_code_path	the path to the php functionality file for the requested page		
	 */
	if(!empty($page_url)){
			$page_path = $pages_directory . '/' . $page_url;
			$pages_code_path = $pages_code_directory . '/' . $page_url;
	}else{
			$page_path = $pages_directory;
			$pages_code_path = $pages_code_directory;
	}
	
	/**
	 * Set $page_specific_settings to the specific page settings.  If they do not exist then set them to the global settings.
	 * @todo 	must verify if the global setting is really the bes approach
	 */
	$page_specific_settings = ((!empty($page_url)) && array_key_exists($page_url, $settings)) ? $settings[$page_url] : $settings['global'];
	if($page_specific_settings['landing_page'] === true){
		$page_path = $page_path . '/index';
		$pages_code_path = $pages_code_path . '/index';
	}
	
	/**
	 * If $page_specific_settings['cache'] is true and $settings['global']['enable_caching'] is true, then start page caching.
	 */
	if(($page_specific_settings['cache'] === true) && ($settings['global']['enable_caching'] === true)){
		
		/**
		 * @var	string	$cachefile the cache file for the requested page (md5 encrypted)
		 */
		$cachefile = $cache_directory . md5($page_path . '/index.html') . '.' . $cache_ext;
		
		/**
		 * @var	$cachefile_created	The date the file was cached
		 */ 
		$cachefile_created = (@file_exists($cachefile)) ? @filemtime($cachefile) : 0; 
		@clearstatcache(); 
		
		/**
		 * If the $cachefile_created is less then the set $cache_time then load the file directly and exit() the code
		 */
		if (time() - $cache_time < $cachefile_created) {  
			@readfile($cachefile);  
			exit(); 
		} 
		
		/**
		 * start the page caching engine
		 */
		ob_start();
	}
	
	/**
	 * @var	string	$js_files a string of all the global and page specific javascript files from the settings YAML
	 */
	$js_files = '';
	
	/**
	 * This if block determines what settings have been supplied for the specific page and global javascript files,  and populates the
	 * $js_files variable with a comma seperated string
	 */
	if((array_key_exists('javascript', $page_specific_settings)) && (!empty($page_specific_settings['javascript']))){
		if((array_key_exists('javascript', $settings['global'])) && (!empty($settings['global']['javascript']))){
			$js_files = array_merge(explode(',', $settings['global']['javascript']), explode(',', $page_specific_settings['javascript']));
		}else{
			$js_files = explode(',', $page_specific_settings['javascript']);
		}
		
		/**
		 * IMPORTANT:: unset the $page_specific_settings['javascript'] so it will not become a variable on the layout
		 */
		unset($page_specific_settings['javascript']);
	}else{
		if((array_key_exists('javascript', $settings['global'])) && (!empty($settings['global']['javascript']))){
			$js_files = explode(',', $settings['global']['javascript']);
		}
	}
	
	/**
	 * Tell Struts to create the ##strutJavascript## based on the $js_files and whether compression setting is set or not 
	 */
	$newStrut->setLayoutJavascriptFromArray($js_files, $js_directory, $settings['global']['compress_js'], $settings['global']['js_compress_directory'], $settings['global']['enable_caching']);

	/**
	 * @var	string	$css_files a string of all the global and page specific css files from the settings YAML
	 */
	$css_files = '';
	
	/**
	 * This if block determines what settings have been supplied for the specific page and global css files,  and populates the
	 * $css_files variable with a comma seperated string
	 */
	if((array_key_exists('css', $page_specific_settings)) && (!empty($page_specific_settings['css']))){
		if((array_key_exists('css', $settings['global'])) && (!empty($settings['global']['css']))){
			$css_files = array_merge(explode(',', $settings['global']['css']), explode(',', $page_specific_settings['css']));
		}else{
			$css_files = explode(',', $page_specific_settings['css']);
		}
		
		/**
		 * IMPORTANT:: unset the $page_specific_settings['css'] so it will not become a variable on the layout
		 */
		unset($page_specific_settings['css']);
	}else{
		if((array_key_exists('css', $settings['global'])) && (!empty($settings['global']['css']))){
			$css_files = explode(',', $settings['global']['css']);
		}
	}
	
	/**
	 * Tell Struts to create the ##strutCSS## based on the $css_files and whether compression setting is set or not 
	 */
	$newStrut->setLayoutCSSFromArray($css_files, $css_directory, $settings['global']['compress_css'], $settings['global']['css_compress_directory'], $settings['global']['enable_caching']);
	
	/**
	 * Check $page_specific_settings['template'], if it is set then $layout_template = $page_specific_settings['template']
	 * else it remains the default layout set above
	 */
	if((array_key_exists('template', $page_specific_settings)) && (!empty($page_specific_settings['template']))){
		$layout_template = $page_specific_settings['template'];
		
		/**
		 * IMPORTANT:: unset the $page_specific_settings['template'] so it will not become a variable on the layout
		 */
		unset($page_specific_settings['template']);
	}else{
		$layout_template = $settings['global']['template'];
	}
	
	/**
	 * Send all the rest of the $page_specific_settings to Struts Engine to become layout variables.
	 * Now all variables set inthe settings YAML is acessible in the layout using ##variable##
	 */
	$newStrut->setLayoutVarFromArray($page_specific_settings, '');
	
	/**
	 * If the $database_file exists, then include it
	 * IMPORTANT:: this must remain before including the PHP functionality file for the specific page.
	 */
	if(file_exists($database_file)){
		include($database_file);
	}
	
	/**
	 * If the page requested has a PHP functionality file, then include and run it.
	 */
	if((!empty($page_url)) && (file_exists($pages_code_path . '.php'))){
		include($pages_code_path . '.php');
	}
	
	/**
	 * If the page requesed has a design layout, then include it.
	 */
	if(file_exists($page_path . '.html')){
		$newStrut->setPageElement($page_path . '.html');
	}
	
	/**
	 * Declare any modules to the Struts Templating Engine you need access to on the layout design page
	 * Example:: this one creates a ##site_nav## that holds the site navigation in the variable
	 */
	$newStrut->setLayoutVar("example_nav", file_get_contents($module_directory . '/example_nav.html'));
	
	/**
	 * Tell the Struts Templating Engine the layout file to use.
	 */
	$newStrut->setLayoutElement($layout_directory . '/' . $layout_template);
	
	/**
	 * Tell Struts Templating Engine to render the layout.
	 */
	print $newStrut->renderLayout();
	
	/**
	 * If $page_specific_settings['cache'] is true, and $settings['global']['enable_caching'] is true
	 * then finish page caching, and dump the cache into the file
	 */
	if(($page_specific_settings['cache'] === true) && ($settings['global']['enable_caching'] === true)){
		
		/**
		 * @var	file $fp holds the file that will be cached			
		 */
		$fp = @fopen($cachefile, 'w');
		@fwrite($fp, ob_get_contents()); 
		@fclose($fp); 
		ob_end_flush(); 
	}
?>